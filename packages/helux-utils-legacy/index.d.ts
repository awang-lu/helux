import type { Dict, Fn, NumStrSymbol } from 'helux-types';
export declare function nodupPush(list: NumStrSymbol[], toPush: NumStrSymbol): void;
export declare function delListItem(list: NumStrSymbol[], toDel: NumStrSymbol): void;
export declare function dedupList(list: Array<any>): any[];
export declare function includeOne(loopList: any[], judgeList: any[]): boolean;
export declare function matchListItem(list: string[], fullStr: string): string;
export declare function enureReturnArr(fn?: Fn, arg?: any): any[];
export declare const GLOBAL_REF: Dict & Window & typeof globalThis;
export declare const DEV_FLAG: boolean;
export declare function noop(...args: any[]): any;
export declare function noopArgs(...args: any[]): any;
export declare function noopArr(...args: any[]): any[];
export declare function isMax(input: number): boolean;
export declare function isDebug(): boolean;
export declare function isObj(mayObj: any): mayObj is Dict;
export declare function isFn(mayFn: any): mayFn is Fn;
export declare function isAsyncFn(mayFn: any): mayFn is Fn;
export declare function isSymbol(maySymbol: any): maySymbol is symbol;
export declare function isPromise(mayObj: any): boolean;
export declare function isProxyRevoked(proxy: Dict): boolean;
export declare function isProxyAvailable(): boolean;
export declare function tryAlert(err: any, throwErr?: boolean, customLabel?: string): void;
export declare function tryWarn(err: any): void;
export declare function warn(msg: string): void;
export declare function getSafeNext(input: number): number;
